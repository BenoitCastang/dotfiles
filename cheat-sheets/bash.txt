$? MAN

man command ## open man page
man 5 command ## man page 5
man builtins ## man for bash commands
https://www.reddit.com/r/commandline/comments/1a9u0h/what_are_some_must_read_man_pages/

$? FILESYSTEM

/sbin ## It contains essential binaries for system administration such as parted or ip
/bin ## It contains essential binaries for all users such as ls, mv, or mkdir
/usr/sbin ## It stores binaries for system administration such as deluser, or groupadd
/usr/bin ## It includes most executable files — such as free, pstree, sudo or man — that can be used by all users
/usr/local/sbin ## It is used to store locally installed programs for system administration that are not managed by the system’s package manager
/usr/local/bin ## It serves the same purpose as /usr/local/sbin but for regular user programs
/opt ## sometimes used to store optional third-party application
/home/$USER/bin AND /home/$USER/.local/bin ## regular users can have their own programs in there
/var/log ## Where the logs are, except for some service-specific logs
/boot ## kernel place
/etc ## general configuration files
/home/User ## user-specifig condig files
/proc ## running processes + system hardware
/proc/sys ## kernel configuration
/dev ## connected hardware devices/nodes
/dev/null ## bit bucket: discards all information sent to it

$? FILETYPES

- ## normal file
d ## directory
l ## soft link
b ## block device (storage)
c ## character device (terminal)
s ## socket

$? FILE PERMISSIONS

r ## open files and read content
w ## edit and delete files
x ## run file as executable or script

s ## set gid, on binary executable files only - grant the process resulting from executing the file access to the privileges of the group who owns the file - written ---s------
S ## set gid, not executable by group
s ## set uid, on binary executable files only - grant the process resulting from executing the file access to the privileges of the user who owns the file (ex: a user uses /bin/password belonging to root with root privileges) - written ------s---
S ## set uid, not executable by user

r ## read directory's content, like filenames, but not the files themselves
w ## create or delete file in the directory, change its name, permissions or owner, even without any permission on this file
x ## enter a directory, but not list the files

t ## sticky bit - only root, directory owner and file owner can rename or delete files in the directory, regardless of other permissions - written d--------t
T ## sticky bit, not executable by others
s ## set gid - make every file or directory created under it inherit the group from the parent directory - written d-----s---

chmod u+rw-x,g+rw-x,o+rw-x file ## symbolic mode
chmod -R a=rw- file ## recursive mode, all files inside directory
chmod 666 file ## numeric mode

chmod +t directory ## set sticky bit
chmod 1777 directory ## numeric mode
chmod g+s directory ## give set gid to a directory
chmod 2777 directory ## numeric mode
chmod u+s file ## give set uid to a file
chmod 4777 file ## numeric mode
chmod 3777 directory ## set sticky bit + set gid on directory

chown user file ## changer owner
chown user:group file ## change owner and group
chown :group file ## change group

chgrp group file ## change groupe of file(s)
chgrp - R group directory ## change recursively

$? MONITORING

cat /etc/os-release ## Show current Linux system infos
uname -a ## Show current Linux system infos
lscpu ## display processor infos
lsblk ## display disks and partitions

$? LOGS

cat /var/log/syslog
dmesg hardware logs
tail -f <file> ## display lines as they arrive

journalctl ## display all logs
journalctl -f ## follow all logs
journalctl -e ## open and jump to the end of the file
journalctl -u <service> ## diplay logs of a specific unit or service
journalctl -fu <service> ## follow logs of a service
/var/log/demsg OR dmseg ## loggin kernel on bootm before syslog is available
journalctl -k OR --dmseg ## kernel ring buffer log
journalctl -b OR --boot ## boot info

last ## display data relevant to successful login out of /var/log/wtmp
lastb ## display data relevant to unsuccessful login out of /var/log/btmp

$? NETWORKING

netstat -tulpn' ## Show network traffic
ping google.com ## Send echo request forever
ping -c 3 google.com ## Send 3 echo requests

ip addr show ## Show ip adress
ip addr add 192.168.0.1/255.255.255.0 dev wlo1 ## static ip address configuration
ip link show ## List network interfaces
ip route show ## Show current IPv4 routing table
ip route add default via 192.168.0.1 ## set default route

/etc/hosts ## first look up for names here before contacting the dns
/etc/resolv.conf ## contains default dns server address

host google.com ## perform dns lookup
dig google.com ## detailed dns lookup

ss ## show all sockets
ss -s ## summary
ss -p ## show process information
ss -4 ## show IPv4
ss -6 ## show IPv6
ss -t ## show tcp sockets
ss -u ## show udp sockets
ss -l ## show sockets listening for new connections

$? MANAGING USERS

whoami ## print effective username
who ## list active logins on the system
w ## list more information
id user ## get uid, gid and groups of a user
userls ## print all real users of the system - personal alias
users ## print the user names of users currently logged in to the user host

su [user] ## Switch user
su - [user] ## Switch user resetting the environment
su ## Switch to root
logout ## Log out command

useradd username ## create a user
useradd -m username ## create the user's home directory at the same time
useradd -M username ## create a user without home directory
useradd -d /home/john john ## custom home directory, can be common with another user but must exist before
useradd -r username ## create a system user (that does not login directly but does background tasks etc + will be under uid 1000 so not shown in the login screen)
useradd -c comment username ## add user info
useradd -e YYYY-MM-DD username ## set the expiry date for the account - the user cannot loginm he must concact the system administrator
useradd -f numberofdays username ## set grace period
useradd -g gid username ## set gid
useradd -G group1,group2 username ## define supplementary groups
useradd -s /bin/bash username ## set specific login shell
useradd -u uid username ## create user with specific uid
useradd -D ## show user creation default values
adduser username ## Create a user, defining password and comments and creating a home directory

/etc/login.defs ## config file for user creation default values: password minimum and maximum days, warn days, uid and gid min and max, create home
/etc/default/useradd ## other config file for user creation default values: shell, home, inactive, expire, skel
/etc/skel ## default content of home directory for new users

usermod [OPTIONS] USERNAME
usermod -l user ## rename user login name
usermod -d /path/to/new/home user ## define a new home directory
usermod -d /path/to/new/home -m user ## define a new home directory and rename old home (move home)
usermod -s /bin/bash user ## change the login shell for the user
usermod -u uid user ## change uid for the account
usermod -g primarygroup user ## change primary group of a user
usermod -G secondarygroup John ## set a new list of secondary groups for a user
usermod -G secondarygroup1,sedondarygroup2 John ## set multiple groups
usermod -aG secondarygroup username ## append secondary group to a user
usermod -aG secondarygroup1,secondarygroup2 username ## append multiple secondary groups
usermod -e YYYY-MM-DD user ## change account expiration date
usermod -L user ## lock user account
usermod -U user ## unlock user acount

chfn user ## change GECOS/comment field interactively
chfn -f fullname user ## change full name
chfn -r room user ## change room
chfn -w workphone user ## change work-phone
chfn -h homephone user ## change home-phone
chfn -o other user ## changer other info

finger user ## show GECOS/comment field
finger -l user ## long listing
finger -s user ## short listing

chsh ## change user shell interactively
chsh -s /usr/bin/zsh ## change user's default shell, takes effect at next login
/etc/shells ## list of available shells

/ect/passwd ## List of users and infos related to accounts: username, x for hidden password, uid, gid, GECOS/comment field, home directory, shell path
/etc/shadow ## Password infos: username, password hash (! if user is locked), last change, minimum days, maximum days, warn days, grace period, expiration date

passwd ## change password of logged in user
passwd user ## change user's password
passwd -S user ## show password status: username, password status (P = passworded, NP = No password, L = Locked, PS = Password shadowed, stored securely), last change date, minumum and maximum days, warn days, grace period (-1 means no grace period)
passwd -l user ## lock user password, disabling the account
passwd -u user ## unlock user password, re-enabling the account
passwd -d user ## delete user password, making the account password-less
passwd -e user ## force password expiration thus password change
passwd -n numberofdays user ## set minimum days
passwd -x numberofdays user ## set maximum days
passwd -w numberofdays user ## set warn days
passwd -i numberofdays user ## set grace period (not standard, prefer chage -I)

chage username ## set minimum and maximum password age, last password change, days of warning before expiration, grace period and account expiration date
chage -l username ## show last password change, password expiration date, grace period, date of account expiration, minimum and maximum number of days between password changes, days of warning before password expiration
chage -d last-day ## set day of last password change - 0 forces the user to change his password the next time he logs in
chage -E YYYY-MM-DD ## set account expiration date
chage -I numberofdays ## set the number of days of inactivity after the password has expired before the accound is locked, i.e. the grace period
chage -m numberofdays ## minimum days between password change - prevents too frequent change
chage -M numberofdays ## maximum number of days - after that the password must be changed
chage -W numberofdays ## warn days - number of days before password expiration that a user begins receiving warnings to change the password

userdel user ## Remove user
userdel -r user ## Remove user and delete home directory

id ## return uid, gid (primary group) and secondary groups
/ect/group ## List of groups: group name, password (x means not used), gid, list of supplementary members (i.e. the group is a secondary group for the user, primary groups for each user being specified in /etc/passwd)
/etc/gshadow ## list of groups: group name, encrypted password, group administrators, group members
groups user ## Display groups of a user

groupadd groupname ## Create a group
groupadd -g gid groupname ## create a group with a specified gid
groupadd -r groupname ## create a systemgroup

groupmod -n newname groupbname ## set new groupname
groupmod -g gid groupname ## set new gid

gpasswd -a username groupname ## make user secondary member of the group
gpasswd -d username groupname ## Remove user from a group
gpasswd -A user1,user2 groupname ## specify group administrators who can remove or add users from a group without needing root privileges
gpasswd groupname ## set password for a group - deprecated
gpasswd -r groupname ## remove password

groupdel groupname ## Delete a group

groupmems -g groupname -l ## list secondary members of the group

$? SUDO

sudo -l ## Show rights of the sudo group
/etc/sudoers ## file for sudo rules
sudo visudo ## edit /etc/sudoers file
sudo update-alternatives --config editor ## edit visudo editor
%sudo ALL=(ALL:ALL) ALL ## basic sudo config line
## the % means its a group
## first ALL means all hosts
## second ALL means switching to all users is allowed
## third ALL means switching to all groups is allowed
## fourth ALL means executing all commands is allowed
%sudo ALL=(ALL:ALL) /usr/bin/apt,/usr/bin/rm ##  restricting commands
%sudo ALL=(ALL:ALL) NOPASSWD: ALL ##  use sudo without password


$? MANAGING PROCESSES

uptime ## state of the host ## The three last digits indicate the system’s load average for the last minute, the last five minutes and the last fifteen minutes, respectively. Each of these numbers indicates how many processes were waiting either for CPU resources or for input/output operations to complete. This means that these processes were ready to run if they had received the respective resources.
top ## Dynamic display running processes
htop ## colored and fancier version
atop ## exists also

free ## parses /proc/meminfo and displays the amount of free and used memory in the system - default in kikibytes
free -b ## Bytes
free -m ## Mebibytes
free -g ## Gibibytes
free -h ## human-readable format

ps ## Static display of processes attached to the current shell ## TIME is the cpu time taken by the process
ps -f ## more information
ps -u ## still more
ps -v ## memory usage
pstree ## Display tree of running processes

pgrep <processname> ## Display process id
pgrep -l <processname> ## Display process id and name
pgrep -a <processname> ## Display process id and bin path
pgrep -u <username> ## Display processes of one user

kill <processid> ## Kill process giving its id
killall <processname> ## Kill process giving its name
killall -s <signal> <processname> ## Send signal to a process giving its name

$? GREP

grep -v ## reverted grep
grep -c ## display only number of matches

$? WC

wc -l ## Count number of lines
wc -c ## Count number of characters
wc -w ## Count number of words

$? CUT

echo "orange,banana,apple" | cut -d ',' -f 2 ## Keep only field 2, fields being seperated by comma

$? REV

echo "file" | rev ## Reverts letters order

$? FIND COMMAND

find [path] <pattern>
find -name <pattern> ## Search exact name pattern
find -type f
find -type d
find -mtime 7 ## time of last modification: one week
find -mtime -7 ## time of last modification: less than a week
find -mtime +7 ## time of last modification: more than a week
find -readable ## is readable by the current user
find -writable ## is writable by the current user
find -executable ## is executable by the current user
find -size -10k
find -size 10M
find -size +10G

$? STREAMS

0 stdin: standard input
1> stdout: standard output ## redirects not errors only
2> stderr: standard error ## redirects errors only
/dev/null ## Files there are deleted

$? HISTORY

history ## show every command of the history
500 ## execute command number 500 of the history
"\C-f": forward-search-history
"\C-r": reverse-search-history
"\C-g": abort
space before a command ## command doesnt go into history

$? SHELL VARIABLES

$# ## Number of arguments
$0 ## Full name of the script
$1, $2 ## Argument 1, argument 2
$@ ## Represents all arguments
. $? ## Exit code of previous command
$$ ## Represents the pid of the current script
. $! ## Represents the pid of the last background command

== ## Test if two strings are exactly the same

myvar='myvar' ## creating a variable
myvar=5 ## set a variable
myvar=$(expr 3 + 4) ## via arithmetic operation
myvar=$((3+4)) ## arithmetic expansion
echo "This is $myvar" ## echoing a variable
env ## shows environment variables
export myvar ## make a variable a environment variable
export myvar='myvar' ## create a new variable and make it an environment variable
## you must put it in bashrc to make it exist through all terminal sessions

mytable="value1 value2 value3" ## create a table
for i in $mytable; do echo $i; done ## echo table

myarray=(value1 value2 value3) ## create indexed array
myarray[3]=value4 ## define element individually, add or modify
myarray+=(value5) ## append element
myarray+=value5 ## append element as string to the index 0 of the array
unset myarray[0] ## unset element, without changing index
echo "${myarray[3]}" ## access array element
echo "${myarray[@]}" ## access all elements
echo "${myarray[*]}" ## access all elements
echo "${#myarray[@]}" ## show array length
for element in "${myarray[@]}"; do echo "$element"; done ## echo array

assoc_array=([key1]=value1 [key2]=value2) ## create associative array, hash map - wont work without declare -A
assoc_array[key3]=value3 ## define element individually, add or modify
assoc_array+=([key3]=value3) ## append element
assoc_array+=value5 ## append element as string to the index 0 of the array
unset assoc_array[key2] ## unset element, without changing index
echo "${assoc_array[key2]}" ## access array element
echo "${assoc_array[@]}" ## access all values
echo "${!assoc_array[@]}" ## access all keys
echo "${#assoc_array[@]}" ## show array length

declare myvar='value' ## declare variable
declare -r MYVAR='value' ## declare read-only variable, a constant
declare -i int=2+3 ## declare int, allowing arithmetic operation withou expr or arithmetic expansion
declare -a myarray=(value1 value2 value3) ## create indexed array
declare -A assoc_array=([key1]="value1" [key2]="value2") ## create associative array
declare -x
declare -f
declare -g
declare -n
declare -p
declare's scoping

typeset

printenv

env

set

unset

$? TIME

timedatectl ## Show current timezone
timedatectl list-timezones ## Show all timezones
sudo timedatectl set-timezone Europe/Paris ## Set timezone

$? PROCESSES

C-Z ## make a program go to the background
fg ## make the program go back to the foreground

$? TPUT

tput ## terminal put

tput setaf 1 ## set ansi foreground red
tput setab 2 ## set ansi background red

tput cup 0 0 ## cursor position first line first column
tput cup $(tput lines) ## last line, beginning of line
tput cup $(tput lines) $(($(tput cols) - 1)) ## last line, end of line
tput cup 0 $(($(tput cols) - 1)) ## first line, end of line
tput cup $(($(tput lines) / 2)) $((($(tput cols) / 2) - 1)) ## center of screen

tput civis ## cursor invisible
tput cnorm ## cursor normal

$? MISCELLANEOUS

echo -n ## echo without new line

sleep 1 ## wait one second

read name ## prompt the user for input and store that input in a variable
read -p "Give value" name ## make a prompt without the need of an echo
read -n 1 foo ## read only the first character and go on
read -s name ## silent the input to not display it
read -r name ## disables backslash escaping, useful for path reading
read firstname lastname ## read two values
read txt < file ## store the first line of the file in the variable
read -t 3 value ## wait only 3 seconds for the input

ls ## list files
ls -l ## long listing
ls -d ## list a directory
ls -a ## list all files
ls -A ## list all files but . and ..

type command ## show how the argument would be interpreted if used as a command name in the shell - results cans be: alias, shell keyword (if, else...), shell function, shell built-in command, file (external command, path returned)
