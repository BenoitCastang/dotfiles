$? MAN

man command ## open man page
man 5 command ## man page 5
man builtins ## man for bash commands

$? FILESYSTEM

/sbin ## It contains essential binaries for system administration such as parted or ip
/bin ## It contains essential binaries for all users such as ls, mv, or mkdir
/usr/sbin ## It stores binaries for system administration such as deluser, or groupadd
/usr/bin ## It includes most executable files — such as free, pstree, sudo or man — that can be used by all users
/usr/local/sbin ## It is used to store locally installed programs for system administration that are not managed by the system’s package manager
/usr/local/bin ## It serves the same purpose as /usr/local/sbin but for regular user programs
/opt ## sometimes used to store optional third-party application
/home/$USER/bin AND /home/$USER/.local/bin ## regular users can have their own programs in there
/var/log ## Where the logs are, except for some service-specific logs
/boot ## kernel place
/etc ## general configuration files
/home/User ## user-specifig condig files
/proc ## running processes + system hardware
/proc/sys ## kernel configuration
/dev ## connected hardware devices/nodes
/dev/null ## bit bucket: discards all information sent to it

$? MONITORING

cat /etc/os-release ## Show current Linux system infos
uname -a ## Show current Linux system infos
lscpu ## display processor infos
lsblk ## display disks and partitions

$? LOGS

cat /var/log/syslog
dmesg hardware logs
tail -f <file> ## display lines as they arrive

journalctl ## display all logs
journalctl -f ## follow all logs
journalctl -e ## open and jump to the end of the file
journalctl -u <service> ## diplay logs of a specific unit or service
journalctl -fu <service> ## follow logs of a service
/var/log/demsg OR dmseg ## loggin kernel on bootm before syslog is available
journalctl -k OR --dmseg ## kernel ring buffer log
journalctl -b OR --boot ## boot info

last ## display data relevant to successful login out of /var/log/wtmp
lastb ## display data relevant to unsuccessful login out of /var/log/btmp

$? NETWORKING

netstat -tulpn' ## Show network traffic
ping google.com ## Send echo request forever
ping -c 3 google.com ## Send 3 echo requests

ip addr show ## Show ip adress
ip addr add 192.168.0.1/255.255.255.0 dev wlo1 ## static ip address configuration
ip link show ## List network interfaces
ip route show ## Show current IPv4 routing table
ip route add default via 192.168.0.1 ## set default route

/etc/hosts ## first look up for names here before contacting the dns
/etc/resolv.conf ## contains default dns server address

host google.com ## perform dns lookup
dig google.com ## detailed dns lookup

ss ## show all sockets
ss -s ## summary
ss -p ## show process information
ss -4 ## show IPv4
ss -6 ## show IPv6
ss -t ## show tcp sockets
ss -u ## show udp sockets
ss -l ## show sockets listening for new connections

$? MANAGING USERS

whoami ## print effective username
who ## list active logins on the system
w ## list more information

id ## get uid, gid and groups of a user

user ## print all real users of the system - personal alias
users ## print the user names of users currently logged in to the user host

/ect/passwd ## List of users
## x refers to the hidden password
## uid = numerical representation of a user
## gid = numerical representation of a group
/etc/shadow ## Password hashes

/ect/group ## List of groups
groups [user] ## Display groups of a user
o
su [user] ## Switch user
su - [user] ## Switch user resetting the environment
su ## Switch to root
logout ## Log out command

useradd username ## create a user
useradd -m username ## create the user's home directory at the same time
useradd -d /home/john john ## custom home directory, can be common with another user but must exist before
useradd -r username ## create a system user (that does not login directly but does background tasks etc + will be under uid 1000 so not shown in the login screen)
useradd -c comment username ## add user info
adduser username ## Create a user, defining password and comments and creating a home directory

passwd ## change password of logged in user
passwd user ## change user's password

userdel user ## Remove user
userdel -r user ## Remove user and delete home directory

groupadd [groupname] ## Create a group

usermod [OPTIONS] USERNAME
usermod -aG groupname username ## Add a user to a group (needs re log to take effect)
usermod -aG groupname,groupname username ## Add a user to multiple groups
usermod -d /path/to/new/home user ## define a new home directory
usermod -d /path/to/new/home --move-home user ## define a new home directory and rename old home

chsh ## change user shell interactively
chsh -s /usr/bin/zsh ## change directly

gpasswd -d [username] [groupname] ## Remove user from a group
groupdel [groupname] ## Delete a group

$? SUDO

sudo -l ## Show rights of the sudo group
/etc/sudoers ## file for sudo rules
sudo visudo ## edit /etc/sudoers file
sudo update-alternatives --config editor ## edit visudo editor
%sudo ALL=(ALL:ALL) ALL ## basic sudo config line
## the % means its a group
## first ALL means all hosts
## second ALL means switching to all users is allowed
## third ALL means switching to all groups is allowed
## fourth ALL means executing all commands is allowed
%sudo ALL=(ALL:ALL) /usr/bin/apt,/usr/bin/rm ##  restricting commands
%sudo ALL=(ALL:ALL) NOPASSWD: ALL ##  use sudo without password


$? MANAGING PROCESSES

uptime ## state of the host ## The three last digits indicate the system’s load average for the last minute, the last five minutes and the last fifteen minutes, respectively. Each of these numbers indicates how many processes were waiting either for CPU resources or for input/output operations to complete. This means that these processes were ready to run if they had received the respective resources.
top ## Dynamic display running processes
htop ## colored and fancier version
atop ## exists also

free ## parses /proc/meminfo and displays the amount of free and used memory in the system - default in kikibytes
free -b ## Bytes
free -m ## Mebibytes
free -g ## Gibibytes
free -h ## human-readable format

ps ## Static display of processes attached to the current shell ## TIME is the cpu time taken by the process
ps -f ## more information
ps -u ## still more
ps -v ## memory usage
pstree ## Display tree of running processes

pgrep <processname> ## Display process id
pgrep -l <processname> ## Display process id and name
pgrep -a <processname> ## Display process id and bin path
pgrep -u <username> ## Display processes of one user

kill <processid> ## Kill process giving its id
killall <processname> ## Kill process giving its name
killall -s <signal> <processname> ## Send signal to a process giving its name

$? GREP

grep -v ## reverted grep
grep -c ## display only number of matches

$? WC

wc -l ## Count number of lines
wc -c ## Count number of characters
wc -w ## Count number of words

$? CUT

echo "orange,banana,apple" | cut -d ',' -f 2 ## Keep only field 2, fields being seperated by comma

$? REV

echo "file" | rev ## Reverts letters order

$? FIND COMMAND

find [path] <pattern>
find -name <pattern> ## Search exact name pattern
find -type f
find -type d
find -mtime 7 ## time of last modification: one week
find -mtime -7 ## time of last modification: less than a week
find -mtime +7 ## time of last modification: more than a week
find -readable ## is readable by the current user
find -writable ## is writable by the current user
find -executable ## is executable by the current user
find -size -10k
find -size 10M
find -size +10G

$? STREAMS

0 stdin: standard input
1> stdout: standard output ## redirects not errors only
2> stderr: standard error ## redirects errors only
/dev/null ## Files there are deleted

$? HISTORY

history ## show every command of the history
500 ## execute command number 500 of the history
"\C-f": forward-search-history
"\C-r": reverse-search-history
"\C-g": abort
space before a command ## command doesnt go into history

$? SHELL VARIABLES

- $# ## Number of arguments
- $0 ## Full name of the script
- $1, $2 ## Argument 1, argument 2
- $@ ## Represents all arguments
- $? ## Exit code of previous command
- $$ ## Represents the pid of the current script
- $! ## Represents the pid of the last background command
== ## Test if two strings are exactly the same
myvar='myvar' ## creating a variable
echo "This is $myvar" ## echoing a variable
env ## shows environment variables
export myvar ## make a variable a environment variable
export myvar='myvar' ## create a new variable and make it an environment variable
you must put it in bashrc to make it exist through all terminal sessions
mytable="banana apple pineapple"

$? TIME

timedatectl ## Show current timezone
timedatectl list-timezones ## Show all timezones
sudo timedatectl set-timezone Europe/Paris ## Set timezone

$? PROCESSES

C-Z ## make a program go to the background
fg ## make the program go back to the foreground

$? FILESYSTEM
