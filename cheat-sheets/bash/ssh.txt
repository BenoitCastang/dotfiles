$? SSH

ssh user@host ## connect through ssh
ssh -v ## gives more infos

/home/user/.ssh/config ## user config file, host is server to connect to, hostname is adress, port is port default 22, user is default user for connection
## Example : 
Host server1
	Hostname 192.168.0.1
	Port 22
	User spiderman
Host server2
	Hostname 192.168.0.2
	Port 22
	User spidergirl

/home/user/.ssh/known_hosts ## stores fingerprints of the server, fingerprint is asked when first connection to a server is attempted
/home/user/.ssh/known_hosts.old ## 
/etc/hosts ## manual dns resolutions

public key ## 
private key ## 
ssh-keygen ## generate keys, do not do it when already having one
authorized_keys ## file to create on the server in /home/user/.ssh/ and put the public key in it
ssh-copy-id porco@debian1 ## copy public key in /home/user/.ssh/authorized_keys
ssh-copy-id -i /home/porco/.ssh/id_rsa.pub porco@debian1 ## manually input public key file
/etc/ssh/ssh_config ## system-wide config file
	PubkeyAuthentication yes
	AuthorizedKeysFile .ssh/authorized_keys
## then sudo systemctl restart sshd

/etc/ssh/ssh_config ## system-wide config file
/ect/ssh/sshd_config ## config file for ssh server
	PermitRootLogin yes/no ## disable root login from ssh (but not then connected to the machine), need systemctl restart ssh then logout to take effect (test ssh connexion before logging out after any ssh config change)
	PasswordAuthentication no ## disable possibility to connect via password, public key is necessary (caution: set public key access before)

$? SCP

sudo scp <file> user@host: ## transfer a file to a host via ssh
sudo scp -r <directory> user@host: ## transfer a directory to a host via ssh
sudo scp user@host:<file> <destination> ## reverse transfer from remote to local

$? RSYNC

sudo rsync <file> user@host: ## transfer a file to a host via ssh
sudo rsync -v <file> user@host: ## show files transfered
sudo rsync -r <directory> user@host: ## transfer a directory
sudo rsync -l <file> user@host: ## allow symlinks transfer
sudo rsync -p <file> user@host: ## keep permissions
sudo rsync -t <file> user@host: ## preserve modification times
sudo rsync -g <file> user@host: ## preserve groups
sudo rsync -o <file> user@host: ## preserve owners
sudo rsync --devices <file> user@host: ## preserve device files
sudo rsync --specials <file> user@host: ## preserve special files
sudo rsync -D <file> user@host: ## same as --devices --specials
sudo rsync -a <file> user@host: ## same as --rlptgoD
sudo rsync -z <file> user@host: ## compress file data during the transfer
sudo rsync -h <file> user@host: ## output numbers in a human-readable format
sudo rsync -progress <file> user@host: ## show progress during transfer
sudo rsync --remove-source-files <file> user@host: ## works as mv, deletes source files
sudo rsync --dry-run <file> user@host: ## works as a test, shows what would be the output of the command
