# TODO: make it valid for root
# TODO: make it work for rhel

if [[ "$distro" = "debian" ]]; then 
  sudo update-alternatives --set editor /usr/bin/vim.basic ## set system editor to vim
fi

PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:/home/porco/.local/kitty.app/bin/"

source /etc/os-release
distro="$ID"

if [[ "$distro" = "rhel" ]]; then
  if [[ ! -f /etc/yum.repos.d/epel.repo ]]; then
    sudo subscription-manager repos --enable codeready-builder-for-rhel-9-"$(arch)"-rpms
    sudo dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
  fi
fi

update() { if [[ "$distro" = "debian" ]]; then sudo apt update; fi; if [[ "$distro" = "rhel" ]]; then sudo dnf check-update; fi }
upgrade() { if [[ "$distro" = "debian" ]]; then sudo apt dist-upgrade -y; fi; if [[ "$distro" = "rhel" ]]; then sudo dnf upgrade; fi }
remove() {
  while (( "$#" > 0 )); do
    package="$1"
    if [[ "$distro" = "debian" ]]; then 
      sudo apt remove -y --purge "$package"
      sudo apt autoremove -y --purge
      shift
    fi
    if [[ "$distro" = "rhel" ]]; then 
      sudo dnf remove -y "$package"
      sudo dnf autoremove -y
      shift
    fi
  done
}
isNotInstalled() {
  package="$1"
  if [[ "$package" = 'snapd' ]]; then package='snap'
    elif [[ "$package" = 'cron' ]]; then package='crontab'
    elif [[ "$package" = 'ripgrep' ]]; then package='rg'
    elif [[ "$package" = 'dnsutils' ]]; then package='dig'
  fi
	if which "$package" > /dev/null 2>&1; then return 1; else return 0; fi
}
install() {
  while (( "$#" > 0 )); do
    package="$1"
    if isNotInstalled "$package"; then
      if [[ "$distro" = "debian" ]]; then
        if [[ "$package" =~ .deb$ ]]; then sudo dpkg -i "$package"
        elif [[ "$package" = "nvim" || "$package" = "zelli" ]]; then sudo snap install --classic "$package"
        else sudo apt install -y "$package"
        fi
      fi
      if [[ "$distro" = "rhel" ]]; then
        if [[ "$package" = "ansible" ]]; then sudo dnf install -y ansible-core
        else sudo dnf install -y "$package"
        fi
      fi
    fi
    shift
  done
}

install ssh vim curl snapd zsh htop tree ncdu ripgrep cron neofetch tldr lsd xclip dnsutils nvim
# install keychain nvim zelli ansible node npm php python3

# zsh config with zim
cd
if [[ ! -e .zimrc ]]; then
  sudo rm -rf /etc/zsh/ /etc/zshrc
  curl -fsSL https://raw.githubusercontent.com/zimfw/install/master/install.zsh | zsh
  echo -e '\nzmodule prompt-pwd\nzmodule eriner' >> .zimrc
fi

## neovim with lazy vim

# kitty
# zellij

# check if repository exists on the home directory, update it if so, download it if not
update_repository() {
  if [ -d ~/"$1" ]; then
		cd ~/"$1"
		git pull https://github.com/BenoitCastang/"$1" > /dev/null 2>&1
	else
	 	echo -e "\e[33mRepository $1 not found.\e[0m"
		cd
		git clone https://github.com/BenoitCastang/"$1"
	fi
	cd
}

update_repository dotfiles
update_repository cheatsheets
# update_repository ansible
# update_repository bash-files
# update_repository python-files
# update_repository c-files
# update_repository personal-website

# check if symlink to dotfile exists on the home directory, create it if not
check_dotfiles() {
	if [ ! -L ~/$1 ]; then
	 	echo -e "\e[33mCreating $1...\e[0m"
		test -e $1 && rm $1
		ln -s ~/dotfiles/$1 ~/$1
	fi
}

check_dotfiles .bashrc
check_dotfiles .inputrc
# check_dotfiles .tmux.conf
# check_dotfiles .tmux
check_dotfiles .vimrc
check_dotfiles .alias
check_dotfiles .zshrc
check_dotfiles .zshrc_input

search() {
	grep -ni --color=auto $1 ~/cheatsheets/*
}

if [[ ! "$SHELL" =~ zsh$ ]]; then
  sudo chsh -s /usr/bin/zsh
fi

if [[ "$HOSTNAME" == "pcp" ]]; then
  eval "$(keychain --eval --agents ssh ~/.ssh/*id*)" # keychain activation to manage ssh key authentication
fi

# system update cron job added if not on the crontab
crontab -l | grep dist-upgrade > /dev/null 2>&1 || (crontab -l; echo "0 0 * * * sudo apt update; sudo apt autoremove -y; sudo apt dist-upgrade -y") | crontab
alias cron='crontab -e'

alias vim='nvim'
# some more ls aliases
alias cat='batcat'
alias ll='ls -Alh'
alias pgrep='pgrep -l'
alias gzip='gzip -v'

# cyberghost vpn aliases
alias vpn='sudo cyberghostvpn'
alias vpnconnect='sudo cyberghostvpn --connect --country-code'

# monitoring aliases
alias uname='uname -a'
alias dmesg='sudo dmesg -T'
alias mdstat='cat /proc/mdstat'

# tree aliases
alias tree='tree -a'
alias type='type -a'

# rsync aliases
# alias rsync='rsync -avh'

# compression aliases
alias compress="tar -czvf"
alias extract="tar -xvf"

# miscellaneous aliases
alias music="cmus"
# alias man="tldr" # command man to go over it
# alias rm="rm -i"
alias srcprofile="source ~/.profile"
alias vmm="sudo virt-manager"

#? c aliases

# alias compile='gcc -std=c17 -g -Wall -Werror'
# alias side='cd /opt/lampp/htdocs/www/side/c/packt'
# alias gcce='gcc && ./hangman'
# alias gdb='gcc && gdb -q ./hw'
# alias plusminus='/opt/lampp/htdocs/www/side/c/zero/plusminus/plusminus'
# alias hangman='/opt/lampp/htdocs/www/side/c/hangman/hangman'
# alias gcc-hangman='cd /opt/lampp/htdocs/www/side/c/hangman/ && gcc -g -Wall hangman.c check_letter_presence.c if_present.c if_not_present.c draw_hangman.c hide_word.c -o hangman'
# alias hw='gcc -g -Wall /home/porco/c/packt/helloworld/helloworld.c -o /home/porco/helloworld && /home/porco/helloworld'

#bash aliases
alias c='clear'
alias profile='vim ~/.profile'
alias fstab='sudo vim /etc/fstab'
alias bashrc='vim ~/.bashrc'
alias vimrc='vim ~/.vimrc'
alias inputrc='vim ~/.inputrc'
alias tmuxrc='vim ~/.tmux.conf'
alias bashsrc='source ~/.bashrc'
alias vimsrc='source ~/.vimrc'
alias inputsrc='bind -f ~/.inputrc'
alias tmuxsrc='source ~/.tmux.conf'
alias zshrc='vim ~/.zshrc'
alias zshsrc='source ~/.zshrc'
alias aliasrc='vim ~/.alias'
alias tx='tmux'
alias txa='tmux a -t'
# alias bind='bind -p | column'
alias lshost='hostnamectl status'

# network aliases
alias lamp='cd /opt/lampp/ && sudo ./lampp start'
alias mysql='/opt/lampp/bin/mysql -p test'
alias mysqldump='/opt/lampp/bin/mysqldump -p --opt'
alias nc='nc -v'
alias iptables='sudo iptables'

# git aliases
alias gs='git status'
alias push='git push origin main'
alias commit='git add -u && git add . && git commit'

# python aliases
alias python='python3'

# docker aliases
alias dr='docker run'
alias drm='docker rm'
alias drmi='docker rmi'
alias dp='docker system prune'
alias da='docker attach'
alias de='docker exec'
alias di='docker images'
alias db='docker build'
alias dps='docker ps -a'

# managing users aliases
alias lsuser='sudo cat /etc/passwd | grep -v nologin | grep -v false | grep -v sync | cut -d: -f1'
alias lsgroup='for user in $(lsuser); do echo $(groups $user); done'
lspasswd() {
	printf "%-10s %-7s %-12s %-5s %-15s %-10s %-10s\n" "USER" "STATUS" "LAST" "MIN" "MAX" "WARN" "GRACE"
	for user in $(lsuser); do
		printf "%-10s %-7s %-12s %-5s %-15s %-10s %-10s\n" "$(sudo passwd -S $user | cut -d " " -f 1)" "$(sudo passwd -S $user | cut -d " " -f 2)" "$(sudo passwd -S $user | cut -d " " -f 3)" "$(sudo passwd -S $user | cut -d " " -f 4)" "$(sudo passwd -S $user | cut -d " " -f 5)" "$(sudo passwd -S $user | cut -d " " -f 6)" "$(sudo passwd -S $user | cut -d " " -f 7)"
	done
}

# systemctl functions
status() { systemctl status "$1" }
stop() { sudo systemctl stop "$1"; status "$1" }
start() { sudo systemctl start "$1"; status "$1" }
restart() { sudo systemctl restart "$1"; status "$1" }
reload() { sudo systemctl reload "$1"; status "$1" }
enable() { sudo systemctl enable "$1"; status "$1" }
disable() { sudo systemctl disable "$1"; status "$1" }
log() { sudo journalctl -u "$1" }
daemonreload() { sudo systemctl daemon-reload }
lssystemctl() { sudo systemctl --list-unit-files }
lsunit() { systemctl list-unit-files }

## grc functions
ip() { grc ip "$1" }
ping() { grc ping "$1" }
nmap() { grc nmap "$1" }
ps() { grc ps "$1" }
lsblk() { grc lsblk -e 7 -o NAME,SIZE,FSTYPE,MOUNTPOINTS }
uptime() { grc uptime }
free() { grc free -h }
unalias du
unalias df
df() { grc df -h --output=source,fstype,size,pcent,target -x tmpfs -x devtmpfs -x squashfs }
du() { grc du -ha -d1 }
